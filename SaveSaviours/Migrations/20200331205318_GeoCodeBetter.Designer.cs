// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using SaveSaviours.Data;

namespace SaveSaviours.Migrations {
    [DbContext(typeof(SaveSavioursContext))]
    [Migration("20200331205318_GeoCodeBetter")]
    partial class GeoCodeBetter {
        protected override void BuildTargetModel(ModelBuilder modelBuilder) {
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SaveSaviours.Entities.Institution", b => {
                b.Property<Guid>("UserId")
                    .HasColumnType("uniqueidentifier");

                b.Property<string>("ContactName")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("PrimaryPhoneNumber")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("SecondaryPhoneNumber")
                    .HasColumnType("nvarchar(max)");

                b.Property<bool>("Vetted")
                    .HasColumnType("bit");

                b.Property<int>("ZipCode")
                    .HasColumnType("int");

                b.HasKey("UserId");

                b.HasIndex("ZipCode");

                b.ToTable("Institutions");
            });

            modelBuilder.Entity("SaveSaviours.Entities.Tag", b => {
                b.Property<int>("Value")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<string>("Label")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.HasKey("Value");

                b.ToTable("Tags");
            });

            modelBuilder.Entity("SaveSaviours.Entities.User", b => {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<int>("AccessFailedCount")
                    .HasColumnType("int");

                b.Property<string>("Email")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<DateTimeOffset?>("LockoutUntil")
                    .HasColumnType("datetimeoffset");

                b.Property<string>("PasswordHash")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<DateTime>("RegistrationDate")
                    .HasColumnType("datetime2");

                b.Property<DateTime?>("ValidationDate")
                    .HasColumnType("datetime2");

                b.HasKey("Id");

                b.ToTable("Users");
            });

            modelBuilder.Entity("SaveSaviours.Entities.UserRole", b => {
                b.Property<Guid>("UserId")
                    .HasColumnType("uniqueidentifier");

                b.Property<string>("Role")
                    .HasColumnType("nvarchar(450)");

                b.HasKey("UserId", "Role");

                b.ToTable("UserRole");
            });

            modelBuilder.Entity("SaveSaviours.Entities.Volunteer", b => {
                b.Property<Guid>("UserId")
                    .HasColumnType("uniqueidentifier");

                b.Property<string>("Bio")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<bool>("IsActive")
                    .HasColumnType("bit");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("PrimaryPhoneNumber")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("SecondaryPhoneNumber")
                    .HasColumnType("nvarchar(max)");

                b.Property<int>("ZipCode")
                    .HasColumnType("int");

                b.HasKey("UserId");

                b.HasIndex("ZipCode");

                b.ToTable("Volunteers");
            });

            modelBuilder.Entity("SaveSaviours.Entities.VolunteerLink", b => {
                b.Property<Guid>("VolunteerId")
                    .HasColumnType("uniqueidentifier");

                b.Property<Guid>("InstitutionId")
                    .HasColumnType("uniqueidentifier");

                b.HasKey("VolunteerId", "InstitutionId");

                b.HasIndex("InstitutionId");

                b.ToTable("VolunteerLink");
            });

            modelBuilder.Entity("SaveSaviours.Entities.VolunteerTag", b => {
                b.Property<Guid>("VolunteerId")
                    .HasColumnType("uniqueidentifier");

                b.Property<int>("TagValue")
                    .HasColumnType("int");

                b.HasKey("VolunteerId", "TagValue");

                b.HasIndex("TagValue");

                b.ToTable("VolunteerTag");
            });

            modelBuilder.Entity("SaveSaviours.Entities.Zip", b => {
                b.Property<int>("Code")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<float>("Latitude")
                    .HasColumnType("real");

                b.Property<float>("Longitude")
                    .HasColumnType("real");

                b.HasKey("Code");

                b.ToTable("Zip");
            });

            modelBuilder.Entity("SaveSaviours.Entities.Institution", b => {
                b.HasOne("SaveSaviours.Entities.User", "User")
                    .WithOne("Institution")
                    .HasForeignKey("SaveSaviours.Entities.Institution", "UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("SaveSaviours.Entities.Zip", "Zip")
                    .WithMany()
                    .HasForeignKey("ZipCode")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("SaveSaviours.Entities.UserRole", b => {
                b.HasOne("SaveSaviours.Entities.User", "User")
                    .WithMany("UserRoles")
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("SaveSaviours.Entities.Volunteer", b => {
                b.HasOne("SaveSaviours.Entities.User", "User")
                    .WithOne("Volunteer")
                    .HasForeignKey("SaveSaviours.Entities.Volunteer", "UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("SaveSaviours.Entities.Zip", "Zip")
                    .WithMany()
                    .HasForeignKey("ZipCode")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("SaveSaviours.Entities.VolunteerLink", b => {
                b.HasOne("SaveSaviours.Entities.Institution", "Institution")
                    .WithMany("LinkedVolunteers")
                    .HasForeignKey("InstitutionId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("SaveSaviours.Entities.Volunteer", "Volunteer")
                    .WithMany("LinkedInstitutions")
                    .HasForeignKey("VolunteerId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("SaveSaviours.Entities.VolunteerTag", b => {
                b.HasOne("SaveSaviours.Entities.Tag", "Tag")
                    .WithMany("TaggedVolunteers")
                    .HasForeignKey("TagValue")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("SaveSaviours.Entities.Volunteer", "Volunteer")
                    .WithMany("Experiences")
                    .HasForeignKey("VolunteerId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });
        }
    }
}
